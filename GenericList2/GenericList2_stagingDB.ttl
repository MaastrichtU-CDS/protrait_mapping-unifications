@prefix rr: <http://www.w3.org/ns/r2rml#>.
@prefix ex: <http://example.com/ns#>.
@prefix map: <http://mapping.local/>.
@prefix sty: <http://purl.bioontology.org/ontology/STY/>.
@prefix sio: <http://semanticscience.org/resource/SIO_>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix ncit: <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#>.
@prefix roo: <http://www.cancerdata.org/roo/>.
@prefix icd: <http://purl.bioontology.org/ontology/ICD10/>.
@prefix skos: <http://www.w3.org/2008/05/skos#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix uo: <http://purl.obolibrary.org/obo/UO_>.
@prefix time: <http://www.w3.org/2006/time#>.
 
###########################################
# Add treating centre
###########################################
map:treatingCentreQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT 
    GEN_IDNUMBER as id, 
    GEN_TREAT_CENTER, 
    GEN_DATE_REGISTR, 
    GEN_REFER_CENTER 
        FROM gen_patient;""";
    rdfs:label "";
    skos:definition "".

map:treatingCentre a rr:TriplesMap;
    rr:logicalTable map:treatingCentreQuery;
    rr:subjectMap [
        rr:template "patient/{id}/treatingCentre/{GEN_TREAT_CENTER}";
        rr:class ncit:C19326;  #clinics and hospitals
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "GEN_TREAT_CENTER"; 
            rr:datatype xsd:string;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_registration_date; #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:registrationDate;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];        
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:referred_by; #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:referringCentre;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:registrationDate a rr:TriplesMap;
    rr:logicalTable map:treatingCentreQuery;
    rr:subjectMap [
        rr:template "patient/{id}/registration/{GEN_DATE_REGISTR}";
        rr:class ncit:C25646; #registration
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_DATE_REGISTR"; 
            rr:datatype xsd:date;
        ];
    ].     

map:referringCentre a rr:TriplesMap;
    rr:logicalTable map:treatingCentreQuery;
    rr:subjectMap [
        rr:template "patient/{id}/registration/{GEN_REFER_CENTER}";
        rr:class ncit:C19326; #clinics and hospitals 
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_REFER_CENTER"; 
            rr:datatype xsd:string;
        ];
    ].
map:patient rr:predicateObjectMap [
        rr:predicate roo:P100039; #is_treated_in
        rr:objectMap [
            rr:parentTriplesMap map:treatingCentre;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].


###########################################
# Add gender / biological Sex 
###########################################    
map:sexQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT 
    GEN_IDNUMBER as id, 
    GEN_GENDER 
        FROM gen_patient;""";
    rdfs:label "";
    skos:definition "".

map:biologicalSex a rr:TriplesMap;
    rr:logicalTable map:sexQuery;
    rr:subjectMap [
        rr:template "patient/{id}/biologicalSex/{GEN_GENDER}";
        rr:class ncit:C28421; #sex
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_GENDER";
            rr:datatype xsd:string;
        ];
    ].  

map:patient rr:predicateObjectMap [
        rr:predicate roo:P100018; #has_biological_sex
        rr:objectMap [
            rr:parentTriplesMap map:biologicalSex;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

###########################################
# Add age at diagnosis 
###########################################    
map:ageAtDiagnosisQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT 
    GEN_IDNUMBER as id, 
    GEN_AGE  
        FROM gen_patient;""";
    rdfs:label "";
    skos:definition "".
    
map:ageAtDiagnosis a rr:TriplesMap;
    rr:logicalTable map:ageAtDiagnosisQuery;
    rr:subjectMap [
        rr:template "patient/{id}/ageAtDiagnosis/{GEN_AGE}";
        rr:class roo:C100002; #age_at_diagnosis
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has_value
        rr:objectMap [
            rr:column "GEN_AGE"; 
            rr:datatype xsd:integer;
        ];
    ];                                                            
    rr:predicateObjectMap [
        rr:predicate roo:P100029; #is_diagnosed_with
        rr:objectMap [
            rr:parentTriplesMap map:neoplasm;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ]. 

map:patient rr:predicateObjectMap [
        rr:predicate roo:P100016; #has_age_at_diagnosis
        rr:objectMap [
            rr:parentTriplesMap map:ageAtDiagnosis;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

###########################################
# Add birth year 
###########################################   
map:birthYearQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT 
    GEN_IDNUMBER as id, 
    GEN_YEAR_BIRTH  
        FROM gen_patient;""";
    rdfs:label "";
    skos:definition "".

map:birthYear a rr:TriplesMap;
    rr:logicalTable map:birthYearQuery;
    rr:subjectMap [
        rr:template "patient/{id}/birthYear/{GEN_YEAR_BIRTH}";
        rr:class ncit:C25155; #birth
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has_unit
        rr:objectMap [
            rr:column "GEN_YEAR_BIRTH";
            rr:datatype xsd:gYear;
        ];
    ].

map:patient rr:predicateObjectMap [
        rr:predicate roo:is_born; #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:birthYear;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

###########################################
# Add educationlevel 
###########################################  
map:educationLevelQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT 
    GEN_IDNUMBER as id, 
    GEN_EDUCATION  
        FROM gen_patient;""";
    rdfs:label "";
    skos:definition "".

map:educationLevel a rr:TriplesMap;
    rr:logicalTable map:educationLevelQuery;
    rr:subjectMap [
        rr:template "patient/{id}/educationLevel/{GEN_EDUCATION}";
        rr:class ncit:C17953; #education level
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "GEN_EDUCATION";
            rr:datatype xsd:string;
        ];
    ].

map:patient rr:predicateObjectMap [
        rr:predicate roo:has_education_level; #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:educationLevel;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].


###########################################
# Add relationship status 
########################################### 
map:relationshipStatusQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT 
    GEN_IDNUMBER as id, 
    GEN_RELATIONSHIP  
        FROM gen_patient;""";
    rdfs:label "";
    skos:definition "".

map:relationshipStatus a rr:TriplesMap;
    rr:logicalTable map:relationshipStatusQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/relationshipStatus/{GEN_RELATIONSHIP}";
        rr:class ncit:C25188; #marital status
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "GEN_RELATIONSHIP";
            rr:datatype xsd:string;
        ];
    ].

map:patient rr:predicateObjectMap [
        rr:predicate roo:has_relationship_status; #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:relationshipStatus;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

###########################################
# Add smoking status 
###########################################  
map:smokingStatusQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT 
    GEN_IDNUMBER as id, 
    GEN_SMOKING, 
    GEN_SM_PACKYEARS, 
    GEN_SM_STOPMONTHS 
        FROM gen_smoking;""";
    rdfs:label "";
    skos:definition "".

map:smokingStatus a rr:TriplesMap;
    rr:logicalTable map:smokingStatusQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/smokingStatus/{GEN_SMOKING}";
        rr:class ncit:C19796; #smoking status
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "GEN_SMOKING"; 
            rr:datatype xsd:string;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100306; #has_smoking_status
        rr:objectMap [
            rr:parentTriplesMap map:formerSmoker;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100306; #has_smoking_status
        rr:objectMap [
            rr:parentTriplesMap map:currentSmoker;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:formerSmoker a rr:TriplesMap;
    rr:logicalTable map:smokingStatusQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/smokingStatus/formerSmoker/{GEN_SM_PACKYEARS}";
        rr:class ncit:C67148; #former smoker
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_SM_PACKYEARS";
            rr:datatype xsd:integer;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has_unit
        rr:objectMap [
            rr:parentTriplesMap map:packYears;                                      
            rr:joinCondition [ 
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_time_period; #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:timeStoppedSmoking;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:timeStoppedSmoking a rr:TriplesMap;
    rr:logicalTable map:smokingStatusQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/smokingStatus/formerSmoker/timeStoppedSmoking/{GEN_SM_STOPMONTHS}";
        rr:class roo:timeStoppedSmoking;
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "GEN_SM_STOPMONTHS";
            rr:datatype xsd:string;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has_unit
        rr:objectMap [
            rr:parentTriplesMap map:month;
            rr:joinCondition [
                rr:child "id"; 
                rr:parent "id";
            ];
        ];
    ].

map:currentSmoker a rr:TriplesMap;
    rr:logicalTable map:smokingStatusQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/smokingStatus/currentSmoker/{GEN_SM_PACKYEARS}";
        rr:class ncit:C67147;
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_SM_PACKYEARS";
            rr:datatype xsd:integer;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has_unit
        rr:objectMap [
            rr:parentTriplesMap map:packYears;
            rr:joinCondition [
                rr:child "id";      
                rr:parent "id";
            ];
        ];
    ].

map:packYears a rr:TriplesMap;
    rr:logicalTable map:smokingStatusQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/packyears";
        rr:class ncit:C73993; #pack year
    ].

map:month a rr:TriplesMap;
    rr:logicalTable map:smokingStatusQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/month";             
        rr:class uo:0000035; #month
    ].

map:patient rr:predicateObjectMap [
        rr:predicate roo:P100306; #has smoking status
        rr:objectMap [
            rr:parentTriplesMap map:smokingStatus;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

###########################################
# Add alcohol use history 
########################################### 
map:alcoholUseHistoryQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT 
    GEN_IDNUMBER as id, 
    GEN_ALCOHOL, 
    GEN_ALCOHOL_DAYS, 
    GEN_ALCOHOL_GLASS 
        FROM gen_alcohol;""";
    rdfs:label "";
    skos:definition "".

map:alcoholUseHistory a rr:TriplesMap;
    rr:logicalTable map:alcoholUseHistoryQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/personalHistory/alcoholUseHistory/{GEN_ALCOHOL}";
        rr:class ncit:C81229; #alcohol use history
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "GEN_ALCOHOL";
            rr:datatype xsd:string;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100423; #consists_of
        rr:objectMap [
            rr:parentTriplesMap map:daysWithMoreThan1Glass;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100423; #consists_of
        rr:objectMap [
            rr:parentTriplesMap map:numberOfGlasses;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:daysWithMoreThan1Glass a rr:TriplesMap;
    rr:logicalTable map:alcoholUseHistoryQuery;
    rr:subjectMap [
        rr:template "patient/{id}/personalHistory/alcoholUseHistory/daysWithMoreThan1Glass/{GEN_ALCOHOL_DAYS}";
        rr:class roo:daysWithMoreThan1Glass; #new roo class
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_ALCOHOL_DAYS"; 
            rr:datatype xsd:integer;
        ];
    ].

map:numberOfGlasses a rr:TriplesMap;
    rr:logicalTable map:alcoholUseHistoryQuery;
    rr:subjectMap [
        rr:template "patient/{id}/personalHistory/alcoholUseHistory/numberOfGlasses/{GEN_ALCOHOL_GLASS}";
        rr:class roo:numberOfGlasses; #new roo class
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_ALCOHOL_GLASS"; 
            rr:datatype xsd:integer;
        ];
    ].

map:patient rr:predicateObjectMap [
        rr:predicate roo:P100022; #has_finding
        rr:objectMap [
            rr:parentTriplesMap map:alcoholUseHistory;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].


###########################################
# Add bodyweight 
########################################### 
map:bodyWeightQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT 
    GEN_IDNUMBER as id, 
    GEN_WEIGHT 
        FROM gen_patient;""";
    rdfs:label "";
    skos:definition "".

map:bodyWeight a rr:TriplesMap;
    rr:logicalTable map:bodyWeightQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/bodyWeight/{GEN_WEIGHT}";
        rr:class ncit:C81328; #bodyweight
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has_value
        rr:objectMap [
            rr:column "GEN_WEIGHT"; 
            rr:datatype xsd:integer;
        ];
    ];  
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has_unit
        rr:objectMap [
            rr:parentTriplesMap map:kilogram;
            rr:joinCondition [
                rr:child "id";  
                rr:parent "id";
            ];
        ];       
    ].

map:kilogram a rr:TriplesMap;
    rr:logicalTable map:bodyWeightQuery; #what query do units get?   
    rr:subjectMap [
        rr:template "patient/{id}/kilogram";
        rr:class uo:0000009; #kilogram
    ].  

map:patient rr:predicateObjectMap [
        rr:predicate roo:P100249; #has_body_weight
        rr:objectMap [
            rr:parentTriplesMap map:bodyWeight;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].


###########################################
# Add bodyheight
########################################### 
map:bodyHeightQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT 
    GEN_IDNUMBER as id, 
    GEN_HEIGHT  
        FROM gen_patient;""";
    rdfs:label "";
    skos:definition "".

map:bodyHeight a rr:TriplesMap;
    rr:logicalTable map:bodyHeightQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/bodyHeight/{GEN_HEIGHT}";
        rr:class ncit:C94488; #stature
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042;  #has_value
        rr:objectMap [
            rr:column "GEN_HEIGHT"; 
            rr:datatype xsd:integer;
        ];
    ];  
    rr:predicateObjectMap [
        rr:predicate roo:P100027; #has_unit
        rr:objectMap [
            rr:parentTriplesMap map:centimeter;
            rr:joinCondition [
                rr:child "id";      
                rr:parent "id";
            ];
        ];       
    ].

map:centimeter a rr:TriplesMap;
    rr:logicalTable map:bodyHeightQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/centimeter";
        rr:class uo:0000015; #centimeter
    ].  

map:patient rr:predicateObjectMap [
        rr:predicate roo:P100248; #has_body_height
        rr:objectMap [
            rr:parentTriplesMap map:bodyHeight;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].


###########################################
# Add neoplasm diagnosis 
###########################################    
map:neoplasmDiagnosisQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT 
    GEN_IDNUMBER as id, 
    GEN_DATE_DIAGN, 
    GEN_TUMOURSITE, 
    GEN_RT_TREATMENT,
    GEN_OTH_C_RT_REIRR 
        FROM gen_patient;""";
    rdfs:label "";
    skos:definition "".
    
map:neoplasm a rr:TriplesMap;
    rr:logicalTable map:neoplasmDiagnosisQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/neoplasm";
        rr:class ncit:C3262; #neoplasm
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100251; #has_date_of_diagnosis
        rr:objectMap [
            rr:parentTriplesMap map:dateOfFirstDiagnosis;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100202; #has_location 
        rr:objectMap [          
            rr:parentTriplesMap map:tumourSite;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100403; #treated_by
        rr:objectMap [
            rr:parentTriplesMap map:radiotherapyTreatmentTechnique;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:is_reirridiation; #new roo predicate  
        rr:objectMap [
            rr:parentTriplesMap map:reirradiation;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:dateOfFirstDiagnosis a rr:TriplesMap;
    rr:logicalTable map:neoplasmDiagnosisQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/neoplasm/dateOfFirstDiagnosis/{GEN_DATE_DIAGN}";
        rr:class roo:dateOfFirstDiagnosis; #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_DATE_DIAGN"; 
            rr:datatype xsd:date;
        ];
    ].

map:tumourSite a rr:TriplesMap;
    rr:logicalTable map:neoplasmDiagnosisQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/neoplasm/tumourSite/{GEN_TUMOURSITE}";
        rr:class ncit:C3263; #neoplasm by site
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "GEN_TUMOURSITE";
            rr:datatype xsd:string;
        ];
    ].

map:radiotherapyTreatmentTechnique a rr:TriplesMap;
    rr:logicalTable map:neoplasmDiagnosisQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/treatment/radiotherapyTreatmentTechnique/{GEN_RT_TREATMENT}";
        rr:class ncit:C15313; #radiation therapy
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "GEN_RT_TREATMENT";
            rr:datatype xsd:string;
        ];
    ].

map:reirradiation a rr:TriplesMap;
    rr:logicalTable map:previousNeoplasmDiagnosisQuery; 
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/reirradiation/{GEN_OTH_C_RT_REIRR}";
        rr:class roo:reirradiation; #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_OTH_C_RT_REIRR"; 
            rr:datatype xsd:boulean;
        ];
    ].
    
map:patient rr:predicateObjectMap [
        rr:predicate roo:P100020; #has_disease
        rr:objectMap [
            rr:parentTriplesMap map:neoplasm;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].


##########################################
# Add previous neoplasm  Needs neoplasm
##########################################    
map:previousNeoplasmDiagnosisQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT 
    GEN_IDNUMBER as id, 
    GEN_OTHERCANCER, 
    GEN_OTH_C_SITE, 
    GEN_OTH_C_ICD,
    GEN_OTH_C_DATE, 
    GEN_OTH_C_RT
        FROM gen_other_cancer;""";
    rdfs:label "";
    skos:definition "".

map:previousNeoplasm a rr:TriplesMap;
    rr:logicalTable map:previousNeoplasmDiagnosisQuery;
    rr:subjectMap [
        rr:template "patient/{id}/neoplasm/previousNeoplasm/{GEN_OTHERCANCER}";
        rr:class roo:personalHistoryOfMalignantNeoplasm; #new roo class
    ];
     rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_OTHERCANCER"; 
            rr:datatype xsd:boulean;                                                                 
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100202; #has_location 
        rr:objectMap [
            rr:parentTriplesMap map:tumourSite;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100251; #has_date_of_diagnosis
        rr:objectMap [
            rr:parentTriplesMap map:dateOfDiagnosis;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_ICD_code; #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:ICD_Code;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100251; #has_date_of_diagnosis
        rr:objectMap [
            rr:parentTriplesMap map:previousRadiotherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:tumourSite a rr:TriplesMap;
    rr:logicalTable map:previousNeoplasmDiagnosisQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/neoplasm/tumourSite/{GEN_OTH_C_SITE}";
        rr:class ncit:C3263; #neoplasm by site
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_OTH_C_SITE";
            rr:datatype xsd:string;
        ];
    ].

map:ICD_Code a rr:TriplesMap;
    rr:logicalTable map:previousNeoplasmDiagnosisQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/neoplasm/ICDcode/{GEN_OTH_C_ICD}";
        rr:class ncit:C66766; #ICD-O-3_Code
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_OTH_C_ICD";
            rr:datatype xsd:string;
        ];
    ].

map:dateOfDiagnosis a rr:TriplesMap;
    rr:logicalTable map:previousNeoplasmDiagnosisQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/neoplasm/dateOfDiagnosis/{GEN_OTH_C_DATE}";
        rr:class roo:dateOfDiagnosis; #new roo predicate?
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_OTH_C_DATE"; 
            rr:datatype xsd:gYear;
        ];
    ].

map:previousRadiotherapy a rr:TriplesMap;
    rr:logicalTable map:previousNeoplasmDiagnosisQuery; 
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/previousRadiotherapy/{GEN_OTH_C_RT}";
        rr:class roo:previousRadiotherapy; #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "GEN_OTH_C_RT"; 
            rr:datatype xsd:string;
        ];
    ].

map:neoplasm rr:predicateObjectMap [
        rr:predicate roo:previousNeoplasm; #new roo class
        rr:objectMap [
            rr:parentTriplesMap map:previousNeoplasm;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

###########################################
# Add planning comparison 
###########################################
map:planningComparisonQuery a rr:LogicalTable;
    rr:sqlQuery """SELECT 
    GEN_IDNUMBER as id, 
    GEN_PLAN_COMPARISON, 
    GEN_PLAN_COMP_DATE, 
    GEN_PLAN_COMP_VERSION, 
    GEN_COMP_OUTCOME, 
    GEN_DEC_PROTONS, 
    GEN_REASON_PROTONS, 
    GEN_REASON_PROT_OTHER
        FROM gen_plan_comparison;""";
    rdfs:label "";
    skos:definition "".

map:radiotherapy a rr:TriplesMap;
    rr:logicalTable map:planningComparisonQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy";
        rr:class ncit:C15313; #radiation therapy
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_planning_comparison; #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:planningComparison;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:planningComparison a rr:TriplesMap;
    rr:logicalTable map:planningComparisonQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/planningComparison/PlanningComparisonYesNo/{GEN_PLAN_COMPARISON}";
        rr:class roo:planningComparison; #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_PLAN_COMPARISON"; 
            rr:datatype xsd:boolean;
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100228; #has_date
        rr:objectMap [
            rr:parentTriplesMap map:PlanningComparisonDate;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:has_version; #new roo predicate
        rr:objectMap [
            rr:parentTriplesMap map:PlanningComparisonVersion;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ]; 
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:parentTriplesMap map:planningComparisonOutcome;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ]; 
    rr:predicateObjectMap [
        rr:predicate roo:P100397; #has_result
        rr:objectMap [
            rr:parentTriplesMap map:protonTherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:parentTriplesMap map:reasonNegativeProtonTherapyWithPositiveDSS;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:parentTriplesMap map:reasonProtonOther;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].

map:PlanningComparisonDate a rr:TriplesMap;
    rr:logicalTable map:planningComparisonQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/planningComparison/PlanningComparisonDate/{GEN_PLAN_COMP_DATE}";
        rr:class roo:PlanningComparisonDate; #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_PLAN_COMP_DATE"; 
            rr:datatype xsd:date;
        ];
    ]. 

map:PlanningComparisonVersion a rr:TriplesMap;
    rr:logicalTable map:planningComparisonQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/planningComparison/PlanningComparisonVersion/{GEN_PLAN_COMP_VERSION}";
        rr:class roo:PlanningComparisonVersion; #new roo class
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value
        rr:objectMap [
            rr:column "GEN_PLAN_COMP_VERSION"; 
            rr:datatype xsd:float;
        ];
    ].

map:planningComparisonOutcome a rr:TriplesMap;
    rr:logicalTable map:planningComparisonQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/planningComparison/PlanningComparisonYesNo/planningComparisonOutcome/{GEN_COMP_OUTCOME}";
        rr:class roo:planningComparisonOutcome; #new roo class
    ];
     rr:predicateObjectMap [
        rr:predicate roo:local_value;
        rr:objectMap [
            rr:column "GEN_COMP_OUTCOME"; 
            rr:datatype xsd:string;                                                      
        ];
    ].

map:protonTherapy a rr:TriplesMap;
    rr:logicalTable map:planningComparisonQuery;
    rr:subjectMap [
        rr:template "patient/{id}/radiotherapy/protonTherapy/{GEN_DEC_PROTONS}";
        rr:class ncit:C66897; #proton beam radiation therapy
    ];
    rr:predicateObjectMap [
        rr:predicate roo:P100042; #has_value 
        rr:objectMap [
            rr:column "GEN_DEC_PROTONS";
            rr:datatype xsd:boulean;
        ];
    ].

map:reasonNegativeProtonTherapyWithPositiveDSS a rr:TriplesMap;
    rr:logicalTable map:planningComparisonQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/vradiotherapy/planningComparison/PlanningComparisonYesNo/reasonNegativeProtonTherapyWithPositivePlanningComparison/{GEN_REASON_PROTONS}";
        rr:class roo:reasonNegativeProtonTherapyWithPositivePlanningComparison; #new roo class
    ];
     rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "GEN_REASON_PROTONS"; 
            rr:datatype xsd:string;  
        ];
    ].

map:reasonProtonOther a rr:TriplesMap;
    rr:logicalTable map:planningComparisonQuery;    
    rr:subjectMap [
        rr:template "patient/{id}/vradiotherapy/planningComparison/PlanningComparisonYesNo/reasonProtonOther/{GEN_REASON_PROT_OTHER}";
        rr:class roo:reasonProtonOther; #new roo class
    ];
     rr:predicateObjectMap [
        rr:predicate roo:local_value; 
        rr:objectMap [
            rr:column "GEN_REASON_PROT_OTHER"; 
            rr:datatype xsd:string;  
        ];
    ].

map:patient rr:predicateObjectMap [
        rr:predicate roo:P100024; #has_procedure
        rr:objectMap [
            rr:parentTriplesMap map:radiotherapy;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id";
            ];
        ];
    ].